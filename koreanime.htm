<html>

<head>
<meta http-equiv="Content-Language" content="ko">
<meta http-equiv="Content-Type" content="text/html; charset=ks_c_5601-1987">
<title>Korean Input System 0.5.1 (JavaScript Version)</title>
</head>



<!---------------------------------------------------------------------------
     
     이 프로그램은 한글입력이 어려운 환경에서 한글입력을 지원하기 위해
     제작되었습니다. 이 프로그램은 자유롭게 배포될수 있으며, 필요시
     코드를 수정하여 사용/배포하여도 무방합니다.
     
     다만, 프로그램 복사/수정/배포시 출저를 밝혀주시기 바랍니다.
     
     이 프로그램은 자바스크립트로 작성되어 브라우저에서 실행할수 있습니다.
     
     또한 브라우저에서는 유니코드를 지원해야 하며, 한글을 입력하기 위한
     컴퓨터에는 한글지원(브라우저 인코딩)이 가능해야 합니다.
     
     본 프로그램은 WindowsXP, IE6.0 SP1에서 작성/테스트 되었습니다.
     
     2003. 12. 07
     -----------------------------------------------------------------------
     
     
     입력라인과 한글 출력라인이 구분되어 있던 것을 하나의 입력창으로 재 구성
     했습니다. 재구성하는 과정에서 한글 오토마타가 구현되어 있는데, 공개되어
     있는 오토마타와.. 구조가 많이 다릅니다.(한글 오토마타를 공부하고 싶으신
     분께서는 다른 소스를 참고하세요. 자바스크립트가 디버깅이 어려워 쉽게 코딩
     하다보니 오토마타 부분은 소스가 많이 길어 졌습니다.)
     
     ※입력시 Ctrl-A로 블럭잡고 입력할때, 여기저기 입력되는 현상이 발생합니다.
     커서 위치를 저장하고, 그위치에 넣어주는 코드가 있는데. 그 부분에서 코드
     상의 문제로 발생하는 것으로 보입니다.( 계속 여기에만 매달릴 시간이 없이
     입부분은 넘어 갑니다.)
     
     2004. 01. 19
     -----------------------------------------------------------------------
     
     
     김용우( YongWoo, Kim ), tricatch@hotmail.com      

------------------------------------------------------------------------------>











<body topmargin="0" leftmargin="0" onLoad="InitAll()">


<FORM NAME="aForm">

<table border="0" cellpadding="2" cellspacing="0" style="border-collapse: collapse" width="450" id="AutoNumber1" height="14" bgcolor="#000000">
  <tr>
    <td width="80" height="14" rowspan="2">
      <p align="center">
      <input type="button" value="한글" name="btKorEng" style="width: 35; height: 22; font-family: 굴림; font-size: 12pt; text-align: center; border-style: solid; border-width: 0; padding-left: 4; padding-right: 4; padding-top: 1; padding-bottom: 1"><input type="button" value="" name="btTemp" style="width: 30; height: 22; font-family: 굴림; font-size: 12pt; text-align: center; border-style: solid; border-width: 0; padding-left: 4; padding-right: 4; padding-top: 1; padding-bottom: 1"></td>
    <td style="padding-top: 2" height="7" align="left">
      <p>
      <font face="굴림" size="2" color="#C0C0C0">KOR/ENG</font><font face="굴림" size="2" color="#FFFFFF">&nbsp;:&nbsp;Shift-Space&nbsp;</font>
      <font face="굴림" size="2" color="#C0C0C0">SELECT</font><font face="굴림" size="2" color="#FFFFFF">&nbsp;:&nbsp;Ctrl-A</font>
      </p>
    </td>
    <td width="61" height="14" rowspan="2">
      <p align="right">
      <font color="#FFFFFF" size="2" face="굴림">
      <a style="font-family: 굴림; font-size: 10pt; color: #FFFFFF; text-decoration: none; font-weight: 700" target="_blank" href="http://myhome.naver.com/tricatch">▶Home</a>
      </font>
      </p>
    </td>
  </tr>
  <tr>
    <td style="padding-top: 2" height="7" align="left">
      <p>
      <font face="굴림" size="2" color="#C0C0C0">CUT</font><font face="굴림" size="2" color="#FFFFFF">&nbsp;:&nbsp;Ctrl-X&nbsp;</font>
      <font face="굴림" size="2" color="#C0C0C0">COPY</font><font face="굴림" size="2" color="#FFFFFF">&nbsp;:&nbsp;Ctrl-C&nbsp;</font>
      <font face="굴림" size="2" color="#C0C0C0">PAST</font><font face="굴림" size="2" color="#FFFFFF">&nbsp;:&nbsp;Ctrl-V</font>
      </p>
    </td>
  </tr>
</table>                        

         
<textarea name="myTextArea" rows="8" cols="46" ONKEYPRESS="myHangule()" ONKEYUP="storeCaret(this)" ONCLICK="storeCaret(this)" ONSELECT="storeCaret(this)" style="font-family: 굴림; font-size: 10pt; width: 450; height: 270; border-style: solid; border-width: 0; padding: 6"></textarea>

                                
</FORM> 

</body>
</html>

<!-- 위에 HTML 소스는 절대 수정 불가.. -->


<!---

//--??   코딩해야 하는 부분...  

-->


<Script language=JavaScript>
<!--

document.onkeydown = kbHooking;


function kbHooking(e)
{
    //처음 키가 입력될때.. 프린트된 정보를 삭제한다..     
    deleteInfoText();


    // 한영 변환키일 경우 함수 내부에서 한글/ENG 값을 토글    
    if( ChangeKorEng() ) return;


    //한글 입력상태에서 BS처리..
    if( isKoreaKb() )
    {

        if( event.keyCode == 8 && STEP>0 )
        {
            event.returnValue  = false;
            event.cancelBubble = false;
            
            //조합상태이면.. 버퍼의 값을 지운다..
            
            STEP--;
            BUFF[ STEP ] = -1;

            tmp = HangulAutomata( true );
            setStatus( tmp );
        }
        else if( (event.keyCode>=37 && event.keyCode<=40)&& STEP>0 )
        {
            
            // 버퍼에 있는 한글을 변환하고
            str = HangulAutomata( true );

            if( str != "" )
                insertAtCaret( this.aForm.myTextArea, str );
        
            //버퍼를 비운다.
            InitBuff();

            setStatus( "" );
          
        }
        else
        {
   
            setStatus( "" );
       }
    
    }

    this.aForm.myTextArea.focus();
    
    return true;
}




function myHangule()
{

    //한글/영문 입력처리..     
    koreaime();

}






/*******************************************************************************
 * 한글 처리. 
 *******************************************************************************/

function koreaime()
{

   var str = "";
   var key = 0;
   
   // 한글 입력시만 처리한다.
   // 영문일 경우 처리 안함.. 
   
   if( isKoreaKb() )
   {
   
       //한글 조합이 가능한 값...
       if( isItAlphabet( event.keyCode ) == true )
       {
           event.returnValue = false;
           event.cancelBubble = false;


          //버퍼에 키값을 저장한다.
          if( STEP <= BUFFSIZE )
          {
              //입력한 값이 모음
              STEP ++;
              BUFF[ STEP-1 ] = GetJamoIndex( event.keyCode );
          }
        
          // 내부에서 한글을 조합하고 완성된 한글이 있으면 반환한다.
          str = HangulAutomata( false );
        
          if( str != "" )
              insertAtCaret( this.aForm.myTextArea, str );
       }
       else
       {
      
          // 버퍼에 있는 한글을 변환하고
          str = HangulAutomata( true );

          if( str != "" )
              insertAtCaret( this.aForm.myTextArea, str );
        
          //버퍼를 비운다.
          InitBuff();
          
          //입력상태를 "한글"로 설정한다.
          setStatus( "" );
       
       }

   }
}

































/*******************************************************************************
 *
 *   ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
 *
 *
 *   한글 처리 함수... 
 *
 *
 *   ↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓
 *
 *******************************************************************************/






/*******************************************************************************
 * 한글을 조합.. 
 * 
 * endFlag = true  버퍼의 내용을 한글로 변환하여 반환한다.
 *           false 키보드가 눌려질때 들어오고. TRUE 상태는
 *                 한글이 입력되는 상황이 아닌 상태에서 들어온다.
 *                 따라서, true상태에서는 한글 조합상태가 아닐때가 많다.
 *                 주어진 정볼를 결합만 하면 된다.
 *******************************************************************************/

function HangulAutomata( endFlag )
{

    var code  = 0;
    var code2 = 0;
    
    var none  = -1;
    
    var key0  = 0;
    var key1  = 0;
    var key2  = 0;
    var key3  = 0;
    var key4  = 0;
    var key5  = 0;

    var str  = "";
    var tmp  = "";

    key0 = BUFF[0];
    key1 = BUFF[1];
    key2 = BUFF[2];
    key3 = BUFF[3];
    key4 = BUFF[4];
    key5 = BUFF[5];
 
    if( STEP== 0 ) return "";

 


    // SIZE = 1, ENDFLAG = FALSE
    //*****************************************************************
    if( JAMO_01 == STEP && endFlag == false )
    {
        if( isJaum( key0 ) )                                           // 자음이 입력되었음
        {
            tmp = GetJohapCharcode( key0, none, none );
            setStatus( tmp );
            return "";
        }
        else                                                           // 모음이 입력되었음
        {
            tmp = GetJohapCharcode( none, key0-64, none );
            setStatus( tmp );
            return "";
        }
    }




    // SIZE = 1, ENDFLAG = TRUE
    //*****************************************************************
    if( JAMO_01 == STEP && endFlag == true )
    {
        if( isJaum( key0 ) )
        {
            str = GetJohapCharcode( key0, none, none );
            return str;
        }
        else
        {
            str = GetJohapCharcode( none, key0-64, none );
            return str;
        }
    }


  

    // SIZE = 2, ENDFLAG = FALSE
    //*****************************************************************
    if( JAMO_02 == STEP && endFlag == false )
    {

        if( isJaum( key0 ) && isJaum( key1 )  )                        // 자음, 자음 일때..
        {
            code = findDoubleJaum( key0, key1 );
                
            if( code > 0 )                                             // 자음 + 자음이 결합 가능함, (자음 결합은 종성에서만 쓰인다.)
            {
                tmp = GetJohapCharcode( none, none, code );
                setStatus( tmp );
                return "";
            }
            else                                                       // 자음 + 자음이 결합 불가능함, 버퍼에서 앞에 글자를 뺀다.
            {
                str = GetJohapCharcode( key0, none, none );
                ShiftBuff( 1 );                                        // 결합 불가 이므로 첫번째 입력받은 글자는 출력하고, 상태는 SIZE=1이 됨
                tmp = HangulAutomata( true );
                setStatus( tmp );
                return str;
            }
        }
        
        
        if( isJaum( key0 ) && !isJaum( key1 )  )                       // 자음, 모음 일때..
        {
            tmp = GetJohapCharcode( key0, key1-64, none );
            setStatus( tmp );
            return "";
        }
        
        
        if( !isJaum( key0 ) && isJaum( key1 )  )                       // 모음, 자음 일때..
        {
            str = GetJohapCharcode( none, key0-64, none );
            ShiftBuff( 1 );
            tmp = HangulAutomata( true );
            setStatus( tmp );
            return str;
        }
        

        if( !isJaum( key0 ) && !isJaum( key1 )  )                      // 모음, 모음 일때..
        {
            code = findDoubleMoum( key0-64, key1-64 );
            
            if( code > 0 )                                             // 모음, 모음이 결합할 수 있음, 결합하고 나면 더이상 없으므로 버퍼 초기화.
            {
                str = GetJohapCharcode( none, code, none );
                InitBuff();
                setStatus( "" );
                return str;
            }
            else                                                       // 모음, 모음이 결합할 수 없음.. 
            {
                str = GetJohapCharcode( none, key0-64, none );
                ShiftBuff( 1 );
                tmp = HangulAutomata( true );
                setStatus( tmp );
                return str;
            }
        }

    }



    // SIZE = 2, ENDFLAG = TRUE
    //*****************************************************************
    if( JAMO_02 == STEP && endFlag == true )
    {

        if( isJaum( key0 ) && isJaum( key1 )  )                        // 자음, 자음 일때..
        {
            code = findDoubleJaum( key0, key1 );
                
            if( code > 0 )                                             // 자음 + 자음이 결합 가능함, (자음 결합은 종성에서만 쓰인다.)
            {
                str = GetJohapCharcode( none, none, code );
                return str;
            }
            else                                                       // 자음 + 모음
            {
                alert( ERR + "(JAMO_02 - TRUE 01)" );
                return "";
            }
        }
        
        
        if( isJaum( key0 ) && !isJaum( key1 )  )                       // 자음, 모음 일때..
        {
            str = GetJohapCharcode( key0, key1-64, none );
            return str;
        }
        
        
        if( !isJaum( key0 ) && isJaum( key1 )  )                       // 모음, 자음 일때..
        {
            alert( ERR + + "(JAMO_02 - TRUE 02)" );
            return "";
        }
        

        if( !isJaum( key0 ) && !isJaum( key1 )  )                      // 모음, 모음 일때..
        {
            code = findDoubleMoum( key0-64, key1-64 );
            
            if( code > 0 )                                             // 모음, 모음이 결합할 수 있음
            {
                str = GetJohapCharcode( none, code, none );
                return str;
            }
            else                                                       // 모음, 모음이 결합할 수 없음.. 
            {
                str = GetJohapCharcode( none, key0-64, none );
                return str;
            }
        }

    }



    // SIZE = 3, ENDFLAG = FALSE
    //*****************************************************************
    if( JAMO_03 == STEP && endFlag == false )
    {
        if( isJaum( key0 ) && isJaum( key1 ) && isJaum( key2 ) )      // 자음, 자음, 자음
        {
             code = findDoubleJaum( key1, key2 );
                
            if( code > 0 )                                             // 자음 + 자음이 결합 가능함, (자음 결합은 종성에서만 쓰인다.)
            {
                str = GetJohapCharcode( key0, none, none );
                ShiftBuff(1);
                tmp = HangulAutomata( true );
                setStatus( tmp );
                return str;
            }
            else                                                       // 자음 + 자음이 결합 불가능함, 버퍼에서 앞에 글자를 뺀다.
            {
                code = findDoubleJaum( key0, key1 );
                str = GetJohapCharcode( none, none, code );
                ShiftBuff(2);
                tmp = HangulAutomata( true );
                setStatus( tmp );
                return str;
            }
        }


        if( isJaum( key0 ) && isJaum( key1 ) && !isJaum( key2 ) )     // 자음, 자음, 모음
        {
            str = GetJohapCharcode( key0, none, none );
            ShiftBuff( 1 );
            tmp = HangulAutomata( true );
            setStatus( tmp );
            return str;
        }


        if( isJaum( key0 ) && !isJaum( key1 ) && isJaum( key2 ) )      // 자음, 모음, 자음
        {
            code = GetJongCharcode( key2 );
            
            if( code>=0 )                                              // 자음+모음+자음
            {
                tmp = GetJohapCharcode( key0, key1-64, code );
                setStatus( tmp );
                return "";
            }
            else                                                       // 자음+모음, 자음(결합불가 자음, ㅃ, ㅉ, ㄸ)
            {
                str = GetJohapCharcode( key0, key1-64, none );
                ShiftBuff( 2 );
                tmp = HangulAutomata( true );
                setStatus( tmp );
                return str;
            }
        }


        if( isJaum( key0 ) && !isJaum( key1 ) && !isJaum( key2 ) )     // 자음, 모음, 모음
        {
            code = findDoubleMoum( key1-64, key2-64 );
            
            if( code > 0 )                                             // 모음, 모음이 결합할 수 있음
            {
                tmp = GetJohapCharcode( key0, code, none );
                setStatus( tmp );
                return "";
            }
            else                                                       // 모음, 모음이 결합할 수 없음.. 
            {
                str = GetJohapCharcode( key0, key1-64, none );
                ShiftBuff( 2 );
                tmp = HangulAutomata( true );
                setStatus( tmp );
                return str;
            }
        
        }

        alert( ERR + "(JAMO_03 - FALSE)" );
    }



    // SIZE = 3, ENDFLAG = TRUE
    //*****************************************************************
    if( JAMO_03 == STEP && endFlag == true )
    {
        if( isJaum( key0 ) && !isJaum( key1 ) && isJaum( key2 ) )      // 자음, 모음, 자음, (결합불가 종성 올수 없음 )
        {
            code = GetJongCharcode( key2 );
            str = GetJohapCharcode( key0, key1-64, code );
            return str;
        }

        if( isJaum( key0 ) && !isJaum( key1 ) && !isJaum( key2 ) )     // 자음, 모음, 모음
        {
            code = findDoubleMoum( key1-64, key2-64 );
            
            if( code > 0 )                                             // 모음, 모음이 결합할 수 있음
            {
                str = GetJohapCharcode( key0, code, none );
                return str;
            }
            else                                                       // 모음, 모음이 결합할 수 없음.. 
            {
                alert( ERR );
            }
        
        }

        alert( ERR );
    }


    // SIZE = 4, ENDFLAG = FALSE
    //*****************************************************************
    if( JAMO_04 == STEP && endFlag == false )
    {
        if( isJaum( key0 ) && !isJaum( key1 ) && isJaum( key2 ) && isJaum( key3 ) )      // 자음, 모음, 자음, 자음
        {
             code = findDoubleJaum( key2, key3 );
                
            if( code > 0 )                                             // 자음 + 자음이 결합 가능함, (자음 결합은 종성에서만 쓰인다.)
            {
                tmp = GetJohapCharcode( key0, key1-64, code );
                setStatus( tmp );
                return "";
            }
            else                                                       // 자음 + 자음이 결합 불가능함, 버퍼에서 앞에 글자를 뺀다.
            {
                code = GetJongCharcode( key2 );
                str = GetJohapCharcode( key0, key1-64, code );
                ShiftBuff(3);
                tmp = HangulAutomata( true );
                setStatus( tmp );
                return str;
            }
        }


        if( isJaum( key0 ) && !isJaum( key1 ) && isJaum( key2 ) && !isJaum( key3 ) )      // 자음, 모음, 자음, 모음
        {
            str = GetJohapCharcode( key0, key1-64, none );
            ShiftBuff(2);
            tmp = HangulAutomata( true );
            setStatus( tmp );
            return str;
        }


        if( isJaum( key0 ) && !isJaum( key1 ) && !isJaum( key2 ) && isJaum( key3 ) )      // 자음, 모음, 모음, 자음
        {
        
            code  = GetJongCharcode( key3 );
            code2 = findDoubleMoum( key1-64, key2-64 );
            
            if( code >=0 )                                            // 자음 결합 가능..
            {
                tmp = GetJohapCharcode( key0, code2, code );
                setStatus( tmp );
                return "";
            }
            else                                                      // 자음 결합 불가.. 
            {
                str = GetJohapCharcode( key0, code2, none );
                ShiftBuff(3);
                tmp = HangulAutomata( true );
                setStatus( tmp );
                return str;
            }
        }


        if( isJaum( key0 ) && !isJaum( key1 ) && !isJaum( key2 ) && !isJaum( key3 ) )     // 자음, 모음, 모음, 모음( 뒤에 오는 모음과 결합 할 수 있는 경우 없음)
        {
            code2 = findDoubleMoum( key1-64, key2-64 );
            
            str = GetJohapCharcode( key0, code2, none );
            ShiftBuff(3);
            tmp = HangulAutomata( true );
            setStatus( tmp );
            return str;
        }


        alert( ERR + "(JAMO_04 - FALSE)" );
    }



    // SIZE = 4, ENDFLAG = TRUE
    //*****************************************************************
    if( JAMO_04 == STEP && endFlag == true )
    {
        if( isJaum( key0 ) && !isJaum( key1 ) && isJaum( key2 ) && isJaum( key3 ) )      // 자음, 모음, 자음, 자음
        {
            code = findDoubleJaum( key2, key3 );
            str = GetJohapCharcode( key0, key1-64, code );
            return str;
        }


        if( isJaum( key0 ) && !isJaum( key1 ) && !isJaum( key2 ) && isJaum( key3 ) )    // 자음, 모음, 모음, 자음
        {
            code  = GetJongCharcode( key3 );
            code2 = findDoubleMoum( key1-64, key2-64 );
            str = GetJohapCharcode( key0, code2, code );
            return str;
        }

        alert( ERR + "(JAMO_04 - TRUE)" );
    }


    // SIZE = 5, ENDFLAG = FALSE
    //*****************************************************************
    if( JAMO_05 == STEP && endFlag == false )
    {
        if( isJaum( key0 ) && !isJaum( key1 ) && isJaum( key2 ) && isJaum( key3 ) && isJaum( key4 ) )      // 자음, 모음, 자음, 자음, 자음
        {
            code  = findDoubleJaum( key2, key3 );
            str = GetJohapCharcode( key0, key1-64, code );
            ShiftBuff(4);
            tmp = HangulAutomata( true );
            setStatus( tmp );
            return str;
        }


        if( isJaum( key0 ) && !isJaum( key1 ) && isJaum( key2 ) && isJaum( key3 ) && !isJaum( key4 ) )     // 자음, 모음, 자음, 자음, 모음
        {
            code  = GetJongCharcode( key2 );
            str = GetJohapCharcode( key0, key1-64, code );
            ShiftBuff(3);
            tmp = HangulAutomata( true );
            setStatus( tmp );
            return str;
        }


        if( isJaum( key0 ) && !isJaum( key1 ) && !isJaum( key2 ) && isJaum( key3 ) && isJaum( key4 ) )    // 자음, 모음, 모음, 자음, 자음
        {
            code  = findDoubleJaum( key3, key4 );
            code2 = findDoubleMoum( key1-64, key2-64 );

            if( code >= 0 )
            {
                tmp = GetJohapCharcode( key0, code2, code );
                setStatus( tmp );
                return "";
            }
            else
            {
                code  = GetJongCharcode( key3 );
                str = GetJohapCharcode( key0, code2, code );
                ShiftBuff(4);
                tmp = HangulAutomata( true );
                setStatus( tmp );
                return str;
            }
        }

        if( isJaum( key0 ) && !isJaum( key1 ) && !isJaum( key2 ) && isJaum( key3 ) && !isJaum( key4 ) )   // 자음, 모음, 모음, 자음, 모음
        {
            code2 = findDoubleMoum( key1-64, key2-64 );
            str = GetJohapCharcode( key0, code2, none );
            ShiftBuff(3);
            tmp = HangulAutomata( true );
            setStatus( tmp );
            return str;
        }

        alert( ERR + "(JAMO_05 - FALSE)" );
    }



    // SIZE = 5, ENDFLAG = TRUE
    //*****************************************************************
    if( JAMO_05 == STEP && endFlag == true )
    {

        if( isJaum( key0 ) && !isJaum( key1 ) && !isJaum( key2 ) && isJaum( key3 ) && isJaum( key4 ) )    // 자음, 모음, 모음, 자음, 자음
        {
            code  = findDoubleJaum( key3, key4 );
            code2 = findDoubleMoum( key1-64, key2-64 );
            str = GetJohapCharcode( key0, code2, code );
            return str;
        }

        alert( ERR + "(JAMO_05 - TRUE)" );
    }


    // SIZE = 6, ENDFLAG = FALSE
    //*****************************************************************
    if( JAMO_06 == STEP && endFlag == false )
    {

        if( isJaum( key0 ) && !isJaum( key1 ) && !isJaum( key2 ) && isJaum( key3 ) && isJaum( key4 ) && isJaum( key5 ) )    // 자음, 모음, 모음, 자음, 자음, 자음
        {
            code  = findDoubleJaum( key3, key4 );
            code2 = findDoubleMoum( key1-64, key2-64 );
            str = GetJohapCharcode( key0, code2, code );
            ShiftBuff(5);
            tmp = HangulAutomata( true );
            setStatus( tmp );
            return str;
        }

        if( isJaum( key0 ) && !isJaum( key1 ) && !isJaum( key2 ) && isJaum( key3 ) && isJaum( key4 ) && !isJaum( key5 ) )   // 자음, 모음, 모음, 자음, 자음, 모음
        {
            code  = GetJongCharcode( key3 );
            code2 = findDoubleMoum( key1-64, key2-64 );
            str = GetJohapCharcode( key0, code2, code );
            ShiftBuff(4);
            tmp = HangulAutomata( true );
            setStatus( tmp );
            return str;
        }

        alert( ERR + "(JAMO_06 - FALSE)" );
    }



    return "";
}









/*******************************************************************************
 * 자음 / 모음 여부를 판다 
 *******************************************************************************/

function isJaum( code )
{

    // 64 미만은 자음, 이상은 모음
    if( code < 64  )
        return true;
        
    return false;
}








/*******************************************************************************
 * 자음 / 모음 여부를 판다 
 *******************************************************************************/

function isNext( value )
{
    if( value + 1 < STEP )
        return true;
        
        
    return false;
}






/*******************************************************************************
 * 겹모음을 검색한다. 
 *******************************************************************************/
 
function findDoubleMoum( code1, code2 )
{
   var i = 0;
   
   for( i=0; i<7; i++ )
   {

       if( doubleMoumTable[i*3] == code1 && doubleMoumTable[i*3+1] == code2 )
           return doubleMoumTable[i*3+2];
   } 
   
   return -1;
}






/*******************************************************************************
 * 겹자음을 검색한다. 
 *******************************************************************************/
 
function findDoubleJaum( code1, code2 )
{

   var i = 0;
   
   for( i=0; i<11; i++ )
   {
       if( doubleJaumTable[i*3] == code1 && doubleJaumTable[i*3+1] == code2 )
           return doubleJaumTable[i*3+2];
   } 
   
   return -1;
}






/*******************************************************************************
 * 영어 키보드 값을 한글 유니코드 인덱스 값으로 변환.. 
 *******************************************************************************/

function GetJamoIndex( keyCode )
{
    var index = 0;
    var hanIndex = -1;
   
    //영대문자..
    if( keyCode >= 65 && keyCode <= 90 ){
        index   = keyCode - 65 + 26;
        hanIndex = keyMapIndexTable[ index ];
    } 

    //영소문자    
    if( keyCode >= 97 && keyCode <= 122 ){
        index   = keyCode - 97;
        hanIndex = keyMapIndexTable[ index ];
    } 
    
    return hanIndex;
}





/*******************************************************************************
 * 키가 영문인지.. 기호/숫자인가를 판다.
 *******************************************************************************/

 
function isItAlphabet( keyCode )
{
    //대문자 범위
    if( keyCode >= 65 && keyCode <= 90 )
        return true;

    //소문자 범위    
    if( keyCode >= 97 && keyCode <= 122 )
        return true;
        
    return false;
}







/*------------------------------------------------------------------------
 * 한글조합... 
 *
 *         0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7
 * cho  : ㄱㄲㄴㄷㄸㄹㅁㅂㅃㅅㅆㅇㅈㅉㅊㅋㅌㅍㅎ
 * jung : ㅏㅐㅑㅒㅓㅔㅕㅖㅗㅘㅙㅚㅛㅜㅝㅞㅟㅠㅡㅢㅣ
 * jong :   ㄱㄲㄳㄴㄵㄶㄷㄹㄺㄻㄼㄽㄾㄿㅀㅁㅂㅄㅅㅆㅇㅈㅊㅋㅌㅍㅎ
 * ----------------------------------------------------------------------- */

function GetJohapCharcode( cho, jung, jong )
{
 
    if( cho  > 18 ) return "";
    if( jung > 20 ) return "";
    if( jong > 27 ) return "";
    
    if( jong < 0  ) jong = "";

    //초성만 사용할 수 있음..
    if( cho >= 0 && jung < 0 )
        return String.fromCharCode( FIRSTSOUND.charCodeAt( cho ) );

    //중성만 사용할 수 있음.
    if( cho < 0 && jung >= 0 )
        return String.fromCharCode( MIDDLESOUND.charCodeAt( jung ) );
    
    //종성만 사용할 수 있음..
    if( cho < 0 && jung < 0 && jong > 0 )
        return String.fromCharCode( LASTSOUND.charCodeAt( jong ) );
    
    //초중종성 결합
    if( cho>=0 && jung>=0 && jong>=0 )
        return String.fromCharCode( UNICODEHANGULFIRST + ( cho * 21 + jung ) * 28 + jong );

   
    return "";
}




/*******************************************************************************
 * 초성에 대비되는 종성코드를 반환, 없는 경우는 결합 불가.. 
 *******************************************************************************/

function GetJongCharcode( code )
{
    if( code<0 || code>18 )
        return -1;
        
    return JONGSUNG[ code ];
}







/*------------------------------------------------------------------------
 * 한글... 
 *
 *         0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7
 * cho  : ㄱㄲㄴㄷㄸㄹㅁㅂㅃㅅㅆㅇㅈㅉㅊㅋㅌㅍㅎ
 * jung : ㅏㅐㅑㅒㅓㅔㅕㅖㅗㅘㅙㅚㅛㅜㅝㅞㅟㅠㅡㅢㅣ
 * jong :   ㄱㄲㄳㄴㄵㄶㄷㄹㄺㄻㄼㄽㄾㄿㅀㅁㅂㅄㅅㅆㅇㅈㅊㅋㅌㅍㅎ
 *
 *
 * 한글 자음 모음 UNICODE 인덱스 테이블 
 * 소문자/대문자 순임.. 
 * 표시된 값은 한글 자음/모음 유니코드 인텍스이며 모음값에는 64가 더해져 있다.
 *---------------------------------------------------------------------- */
                           
var keyMapIndexTable = new Array( 6, 81, 14, 11,  3,  5, 18, 72, 66, 68, 64, 84, 82, 77, 65, 69,  7,  0,  2,  9, 70, 17, 12, 16, 76, 15,
                                  6, 81, 14, 11,  4,  5, 18, 72, 66, 68, 64, 84, 82, 77, 67, 71,  8,  1,  2, 10, 70, 17, 13, 16, 76, 15 );     



/*----------------------------------------------------------------------
 * UNICODE 한글 종성 테이블, 겹자음은 겹자음 테이블에 있음
 *---------------------------------------------------------------------- */
//                        0  1  2  3   4  5   6   7   8   9   0   1   2   3   4   5   6   7   8
var JONGSUNG = new Array( 1, 2, 4, 7, -1, 8, 16, 17, -1, 19, 20, 21, 22, -1, 23, 24, 25, 26, 27 );




/*----------------------------------------------------------------------
 * 겹모음 테이블
 *---------------------------------------------------------------------- */

var doubleMoumTable = new Array(  8,  0,  9, /* ㅗ, ㅏ, ㅘ */ 
                                  8,  1, 10, /* ㅗ, ㅐ, ㅙ */ 
                                  8, 20, 11, /* ㅗ, ㅣ, ㅚ */ 
                                 13,  4, 14, /* ㅜ, ㅓ, ㅝ */ 
                                 13,  5, 15, /* ㅜ, ㅔ, ㅞ */ 
                                 13, 20, 16, /* ㅜ, ㅣ, ㅟ */ 
                                 18, 20, 19  /* ㅡ, ㅣ, ㅢ */ ); // END


/*-----------------------------------------------------------------------
 * 겹받침 테이블 
 *----------------------------------------------------------------------- */ 

var doubleJaumTable = new Array(  0,  9,  3, /* ㄱ, ㅅ*/ 
                                  2, 12,  5, /* ㄴ, ㅈ*/ 
                                  2, 18,  6, /* ㄴ, ㅎ*/ 
                                  5,  0,  9, /* ㄹ, ㄱ*/ 
                                  5,  6, 10, /* ㄹ, ㅁ*/ 
                                  5,  7, 11, /* ㄹ, ㅂ*/ 
                                  5,  9, 12, /* ㄹ, ㅅ*/ 
                                  5, 16, 13, /* ㄹ, ㅌ*/ 
                                  5, 17, 14, /* ㄹ, ㅍ*/ 
                                  5, 18, 15, /* ㄹ, ㅎ*/ 
                                  7,  9, 18  /* ㅂ, ㅅ*/ ); // END  



var FIRSTSOUND         = "ㄱㄲㄴㄷㄸㄹㅁㅂㅃㅅㅆㅇㅈㅉㅊㅋㅌㅍㅎ";
var MIDDLESOUND        = "ㅏㅐㅑㅒㅓㅔㅕㅖㅗㅘㅙㅚㅛㅜㅝㅞㅟㅠㅡㅢㅣ";
var LASTSOUND          = " ㄱㄲㄳㄴㄵㄶㄷㄹㄺㄻㄼㄽㄾㄿㅀㅁㅂㅄㅅㅆㅇㅈㅊㅋㅌㅍㅎ";

var UNICODEHANGULFIRST = 0xAC00;
var UNICODEHANGULLAST  = 0xD79F;


var JAMO_01 = 1;
var JAMO_02 = 2;
var JAMO_03 = 3;
var JAMO_04 = 4;
var JAMO_05 = 5;
var JAMO_06 = 6;



/*******************************************************************************
 *
 *   ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑
 *
 *
 *   한글 처리 함수... 
 *
 *
 *   ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑
 *
 *******************************************************************************/












































/*******************************************************************************
 * 한/영 상태반환 
 *******************************************************************************/
 
function isKoreaKb()
{
    if( this.aForm.btKorEng.value == ENG )
        return false;
    else
        return true;

}



/*******************************************************************************
 * 한/영 변환 키 입력 확인... 
 *******************************************************************************/
 
function ChangeKorEng()
{

    // Alt 키가 눌릴때.. 처리.. 
    if( event.shiftKey && event.keyCode == 32 )
    {
        event.returnValue  = false;
        event.cancelBubble = false;

        if( isKoreaKb() == false )
        {
            setInputMode( KOR );
        }
        else
        {
            // 버퍼에 있는 한글을 변환하고
            str = HangulAutomata( true );

            if( str != "" )
                insertAtCaret( this.aForm.myTextArea, str );
        
            //버퍼를 비운다.
            InitBuff();
          
            //입력상태를 "한글"로 설정한다.
            setInputMode( ENG );
        }
            
        return true;
    }
    
    return false;
}







/*******************************************************************************
 * TEXTAREA의 커서 위치를 저장하고 하는 함수.. 
 *******************************************************************************/ 
 
function storeCaret( textEl )
{

    if( textEl.createTextRange ) 
        textEl.caretPos = document.selection.createRange().duplicate();
     
}
     
     
     
     
     

/******************************************************************************
 * TEXTAREA의 커서 위치에 값을 넣는 함수... 
 ******************************************************************************/
 
function insertAtCaret( textEl, text ){

    if( textEl.createTextRange && textEl.caretPos ){
    
         var caretPos = textEl.caretPos;
         
         caretPos.text = caretPos.text.charAt(caretPos.text.length - 1) == ' ' ? text + ' ' : text;
    }
    else
         textEl.value  = text;

}




/******************************************************************************
 * TEXTAREA에 표시된 정보를 삭제한다..  
 ******************************************************************************/

function deleteInfoText()
{
    
    if( bFirstKeyDown == true )
    {
        this.aForm.myTextArea.value = "";
        bFirstKeyDown = false;
    }
}




/*----------------------------------------------------------------------------------
 * 프로그램 정보를 프린트 한다. 
 *----------------------------------------------------------------------------------*/

function printHanKb(){

   
    var str = "";
    
    str += "\n";
    str += "Korean Input System 0.5.1 ( JavaScript Version )\n";
    str += "---------------------------------------------------\n";
    str += " → 한글2벌식 ( QWERTY 영문자판 )\n";
    str += " → 영문/숫자/기호/특수문자\n";
    str += "---------------------------------------------------\n";
    str += " \n";
    
    str += "CopyLeft 2003 YongWoo Kim ( tricatch@hotmail.com )"; 
     
    this.aForm.myTextArea.value = str;
}






/*----------------------------------------------------------------------------------
 * 한글 입력버퍼를 지정한 인덱스 범위를 초기화 
 *----------------------------------------------------------------------------------*/

function ClearBuff( startIndex, endIndex )
{
    var i = 0;
    
    for( i=startIndex; i<endIndex; i++) BUFF[i] = -1;
}



/*----------------------------------------------------------------------------------
 * 한글 입력버퍼를 지정한 인덱스 범위를 초기화 
 *----------------------------------------------------------------------------------*/

function ShiftBuff( start )
{
    var i = 0;
    
    for( i=0; i<STEP-start; i++)
    {
         BUFF[i] = BUFF[ start+i ];
    }
    
    for( i=STEP-start; i<BUFFSIZE; i++ )
    {
        BUFF[i] = -1;
    }
    
    STEP -= start;
  
}






/*----------------------------------------------------------------------------------
 * 한글 입력버퍼 초기화 함수 
 *----------------------------------------------------------------------------------*/

function InitBuff()
{
    //한글입력버퍼 초기화
    ClearBuff( 0, BUFFSIZE );
    
    //한글입력버퍼 인덱스 초기화
    STEP = 0;
    
    //조합상태를 초기화 한다.
    johap_status = 0;
  
}



/******************************************************************************
 * 프로그램 변수/상태 초기화 
 ******************************************************************************/

function InitAll()
{
    //프로그램 정보
    printHanKb();

    //처음 입력을 체크하기 위한 변수    
    bFirstKeyDown = true;
    
    //한글입력 버퍼 초기화
    InitBuff();

    //박스에 포커스 이동..
    this.aForm.myTextArea.focus();
    
}



/******************************************************************************
 * 입력을 한글 상태로 바꾸기..
 ******************************************************************************/

function setInputMode( value )
{
    this.aForm.btKorEng.value = value;
}


/******************************************************************************
 * 입력되고 있는 값을 보여준다.
 ******************************************************************************/

function setStatus( value )
{
    this.aForm.btTemp.value = value;
}





/*----------------------------------------------------------------------------------
 * 전역변수.... 
 *----------------------------------------------------------------------------------*/

var bFirstKeyDown = true;
var BUFF          = new Array( -1, -1, -1, -1, -1, -1 );
var STEP          = -1;
var BUFFSIZE      = 6;

var KOR           = "한글";
var ENG           = "ENG";

var ERR           = "ERROR - 한글입력에서 발생 불가능한 경우입니다.\n이 에러를 발생시키는 키 입력을 e-Mail로 보내주시면 수정하는 데 큰 도움이 됩니다.\n잠깐 번거로우 시더라도 e-Mail 잊지 말아주세요."; 
-->
</Script>